package com.aurionpro.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.sql.DataSource;
import com.aurionpro.model.Employee;

public class EmployeeDbUtil {
	private DataSource datasource;

	public EmployeeDbUtil(DataSource datasource) {
		this.datasource = datasource;
	}

	public List<Employee> getAllEmployees() throws SQLException, ParseException {

		List<Employee> employees = new ArrayList<>();

		Connection conn = null;
		Statement stmt = null;
		ResultSet result = null;

		try {

			conn = datasource.getConnection();
			String sql = "select * from employee  ";
			stmt = conn.createStatement();
			result = stmt.executeQuery(sql);

			while (result.next()) {

				int id = result.getInt("id");
				String name = result.getString("name");
				String email = result.getString("email");
				Date dob = result.getDate("dob");
				String gender = result.getString("gender");
				String designation = result.getString("designation");

				Employee tempEmployee = new Employee(id, name, email, dob, gender, designation);

				employees.add(tempEmployee);

			}

			return employees;
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(conn, stmt, null);
		}
		return employees;

	}

	private void close(Connection conn, Statement stmt, ResultSet result) throws SQLException {
		if (conn != null) {
			conn.close();
		}
		if (stmt != null) {
			stmt.close();
		}
		if (result != null) {
			result.close();
		}

	}

	public void addNewEmployee(Employee emp) throws SQLException {

		Connection conn = null;
		PreparedStatement stmt = null;
		try {
			conn = datasource.getConnection();
			String sql = "insert into employee (name, email, dob, gender, designation) value (?,?,?,?,?)";
			stmt = conn.prepareStatement(sql);
			stmt.setString(1, emp.getName());
			stmt.setString(2, emp.getEmail());
			stmt.setDate(3, new java.sql.Date(emp.getDob().getTime()));
			stmt.setString(4, emp.getGender());
			stmt.setString(5, emp.getDesignation());
			stmt.execute();
			// stmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(conn, stmt, null);
		}

	}

	public Employee getEmployeeById(int id) throws SQLException, ParseException {

		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet result = null;
		Employee tempEmployee = null;
		try {

			conn = datasource.getConnection();
			String sql = "select * from employee where id=?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, id);
			result = stmt.executeQuery();

			if (result.next()) {
				String name = result.getString("name");
				String email = result.getString("email");
				Date dob = result.getDate("dob");
				String gender = result.getString("gender");
				String designation = result.getString("designation");

				tempEmployee = new Employee(id, name, email, dob, gender, designation);

			}
			return tempEmployee;
		} catch (SQLException e) {
			e.printStackTrace();

		} finally {
			close(conn, stmt, null);
		}

		return null;
	}

	public void updateEmployee(Employee emp) throws SQLException {

		Connection conn = null;
		PreparedStatement stmt = null;
		try {
			conn = datasource.getConnection();
			String sql = "update employee set name=?, email=?, dob=?, gender=?, designation=? where id=?";
			stmt = conn.prepareStatement(sql);
			stmt.setString(1, emp.getName());
			stmt.setString(2, emp.getEmail());
			stmt.setDate(3, new java.sql.Date(emp.getDob().getTime()));
			stmt.setString(4, emp.getGender());
			stmt.setString(5, emp.getDesignation());
			stmt.setInt(6, emp.getId());
			stmt.execute();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(conn, stmt, null);
		}

	}

	public void deleteEmployee(int id) throws SQLException {
		Connection conn = null;
		PreparedStatement stmt = null;

		try {
			conn = datasource.getConnection();
			String sql = "delete from employee where id=?";
			stmt = conn.prepareStatement(sql);
			stmt.setInt(1, id);
			stmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			close(conn, stmt, null);

		}
	}

	public List<Employee> searchEmployee(String option, String value) throws SQLException {
		List<Employee> employees = new ArrayList<>();
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet result = null;

		try {
			conn = datasource.getConnection();

			String sql;
			switch (option) {
			case "name":
				sql = "SELECT * FROM employee WHERE name LIKE ?";
				break;
			case "email":
				sql = "SELECT * FROM employee WHERE email LIKE ?";
				break;
			case "id":
				sql = "SELECT * FROM employee WHERE id LIKE ?";
				break;
			case "gender":
				sql = "SELECT * FROM employee WHERE gender LIKE ?";
				break;
			case "dob":
				sql = "SELECT * FROM employee WHERE dob LIKE ?";
				break;
			case "designation":
				sql = "SELECT * FROM employee WHERE designation LIKE ?";
				break;
			default:
				throw new IllegalArgumentException("Invalid search option: " + option);
			}

			stmt = conn.prepareStatement(sql);
			stmt.setString(1, value + "%"); 

			result = stmt.executeQuery();

			while (result.next()) {
				int id = result.getInt("id");
				String name = result.getString("name");
				String email = result.getString("email");
				Date dob = result.getDate("dob");
				String gender = result.getString("gender");
				String designation = result.getString("designation");

				Employee tempEmployee = new Employee(id, name, email, dob, gender, designation);
				employees.add(tempEmployee);
			}
		} catch (SQLException e) {
			e.printStackTrace(); 
		} finally {
			close(conn, stmt, result);
		}

		return employees;
	}
}